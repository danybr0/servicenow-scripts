//*** This script prints the names and sys_ids of the groups that contain the itil role in their roles field

// get the sys_id of the itil role
var itilRole = new GlideRecord ('sys_user_role');
itilRole.get ('name', 'itil');
gs.print ('Itil role sys_id: ' + itilRole.sys_id);

// query the groups that have the itil role in their roles field
var grGroup = new GlideRecord ('sys_user_group');
grGroup.addQuery ('roles', '=', itilRole.sys_id);
grGroup.query ();
// loop through the groups and print their names and sys_ids
while (grGroup.next ()) {
  gs.print ('Group: ' + grGroup.name + ' | Sys_id: ' + grGroup.sys_id);
}


//*** This checks the number of duplicates for each user

function getDupes(tableName, dupeField) {  
    var q = new GlideAggregate(tableName); 
    //q.addQuery('active', '=', 'true'); //returns only active records
    q.addAggregate('COUNT', dupeField); //aggregate to count values in whatever field is passed as dupeField
    q.addHaving('COUNT', dupeField, '>', '1'); //returns only records having more than one active instance of dupeField (duplicates)
    q.groupBy(dupeField); // Group by the duplicate field to count duplicates for each value
    q.query();  

    var userDuplicateCount = {}; // Object to store user names and their duplicate counts

    while (q.next()) {  
        var userName = q.getValue(dupeField);
        var duplicateCount = q.getAggregate('COUNT', dupeField);

        // Store the user name and their duplicate count in the object
        userDuplicateCount[userName] = duplicateCount;       
    } 
    return userDuplicateCount; 
}

var duplicateUserCounts = getDupes('sys_user', 'name');
for (var userName in duplicateUserCounts) {
    var duplicateCount = duplicateUserCounts[userName];
    gs.info('User: ' + userName + ', Duplicate Count: ' + duplicateCount);
}

if (Object.keys(duplicateUserCounts).length === 0) {
    gs.info('No duplicate user names found.');
}

//*** This script checks if duplicates exist without counting the number of duplicates

function getDupes(tableName, dupeField) {  
    var q = new GlideAggregate(tableName); 
    //q.addQuery('active', '=', 'true'); //returns only active records
    q.addAggregate('COUNT', dupeField); //aggregate to count values in whatever field is passed as dupeField
    q.addHaving('COUNT', dupeField, '>', '1'); //returns only records having more than one active instance of dupeField (duplicates)
    q.query();  
    var listOfDupes = new Array(); //build an array to push the results into
    while (q.next()) {  
        listOfDupes.push(q.getValue(dupeField)); //Push the value of the dupe field to the array       
    } 
    return listOfDupes; 
}

var duplicateUserNames = getDupes('sys_user', 'name');
if (duplicateUserNames.length > 0) {
    gs.info('Duplicate User Names: ' + duplicateUserNames.join(', '));
} else {
    gs.info('No duplicate user names found.');
}

Reference: 

https://snprotips.com/blog/rvicenowprotips.com/2015/12/detecting-duplicate-records-with.html


//*** Attachment Checker

var tableName = 'incident'; // Replace with your specific table name, e.g., 'incident'

// Query the specified table
var ticketRecord = new GlideRecord(tableName);
ticketRecord.query();

while (ticketRecord.next()) {
    var ticketSysId = ticketRecord.getUniqueValue();
    var attachment = new GlideSysAttachment();
    var attachmentGR = attachment.getAttachments(tableName, ticketSysId);

    // Check if the ticket has attachments
    if (attachmentGR.hasNext()) {
        gs.info('Ticket ' + ticketRecord.number + ' has the following attachments:');

        while (attachmentGR.next()) {
            gs.info(attachmentGR.getValue('file_name'));
        }
    } else {
        gs.info('Ticket ' + ticketRecord.number + ' has no attachments.');
    }
}

This script does the following:

1) Iterates through each record in the specified table (like incidents, change requests, etc.).
2) For each record, it checks if there are any attachments.
3) If there are attachments, it logs the names of these attachments.

Reference:

https://docs.servicenow.com/bundle/vancouver-api-reference/page/app-store/dev_portal/API_reference/GlideSysAttachmentGlobal/concept/GlideSysAttachmentGlobalAPI.html


//*** This script finds incidents with time worked entries in ServiceNow

(function() {
    var incidentWithTimeWorked = {};

    // Query the task_time_worked table for records related to incidents
    var timeWorked = new GlideRecord('task_time_worked');
    timeWorked.addQuery('task.sys_class_name', 'incident'); // Filter for incident class or task type
    timeWorked.query();

    while (timeWorked.next()) {
        // Use the incident's sys_id as a key to track unique incidents
        var incidentSysId = timeWorked.task.sys_id.toString();

        // Check if this incident is already in the list
        if (!incidentWithTimeWorked[incidentSysId]) {
            incidentWithTimeWorked[incidentSysId] = {
                number: '', // Placeholder for incident number
                total_time: 0 // Placeholder for total time worked
            };

            // Retrieve incident number
            var incidentGR = new GlideRecord('incident');
            if (incidentGR.get(incidentSysId)) {
                incidentWithTimeWorked[incidentSysId].number = incidentGR.getValue('number');
            }
        }

        // Add time worked to the total for this incident
        incidentWithTimeWorked[incidentSysId].total_time += parseInt(timeWorked.getValue('time_worked'), 10);
    }

    // Log the incidents with their total time worked
    for (var id in incidentWithTimeWorked) {
        if (incidentWithTimeWorked.hasOwnProperty(id)) {
            var record = incidentWithTimeWorked[id];
            gs.log('Incident ' + record.number + ' has ' + record.total_time + ' seconds of time worked.');
        }
    }
})();

This script does the following:

1) It queries the task_time_worked table for entries related to incidents.
2) It tracks unique incidents and sums up the time worked for each incident.
3) It logs the incident number and the total time worked.
